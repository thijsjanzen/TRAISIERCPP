if (island_ontogeny == 0 & sea_level == 0) {
if (Amax != 1 || is.null(Amax)) {
warning("Constant island area requires a maximum area of 1.")
}
return(1)
}
# Beta function ontogeny and constant sea-level
if (island_ontogeny == 1 & sea_level == 0) {
At <- calc_Abeta(proptime = proptime,
proptime_max = proptime_max,
peak = peak,
Amax = Amax)
return(At)
}
if (island_ontogeny == 0 & sea_level == 1) {
angular_freq <- 2 * pi * freq
delta_sl <- ampl * cos((proptime_curr - proptime) * angular_freq)
r_curr <- sqrt((Acurr) / pi)
h_curr <- tan(theta) * r_curr
h_delta <- max(0, h_curr - ampl + delta_sl)
At <- pi * (h_delta / tan(theta)) ^ 2
return(At)
}
if (island_ontogeny == 1 && sea_level == 1) {
A_beta <- calc_Abeta(proptime,
proptime_max,
peak,
Amax)
angular_freq <- 2 * pi * freq
delta_sl <- ampl * cos((proptime_curr - proptime) * angular_freq)
r_curr <- sqrt(A_beta / pi)
h_curr <- tan(theta) * r_curr
h_delta <- max(0, h_curr - ampl + delta_sl)
At <- pi * (h_delta / tan(theta)) ^ 2
return(At)
}
}
#' Function to describe changes in extinction rate through time.
#'
#' @inheritParams default_params_doc
#'
#' @keywords internal
#' @family rate calculations
#' @references Valente, Luis M., Rampal S. Etienne, and Albert B. Phillimore.
#' "The effects of island ontogeny on species diversity and phylogeny."
#' Proceedings of the Royal Society of London B: Biological Sciences 281.1784
#' (2014): 20133227.
#' @author Pedro Neves, Joshua Lambert, Shu Xie
get_ext_rate <- function(mu,
hyper_pars,
extcutoff = 1000,
num_spec,
A,
trait_pars = NULL,
island_spec = NULL) {
x <- hyper_pars$x
if (is.null(trait_pars)) {
ext_rate <- max(0, mu * (A ^ -x) * num_spec, na.rm = TRUE)
ext_rate <- min(ext_rate, extcutoff, na.rm = TRUE)
# testit::assert(ext_rate >= 0)
return(ext_rate)
} else {   ##species have two states
if (is.matrix(island_spec) || is.null(island_spec)) {
num_spec_trait1 <- length(which(island_spec[, 8] == "1"))
num_spec_trait2 <- length(which(island_spec[, 8] == "2"))
}
ext_rate1 <- mu * num_spec_trait1
ext_rate2 <- trait_pars$ext_rate2 * num_spec_trait2
ext_list <- list(ext_rate1 = ext_rate1,
ext_rate2 = ext_rate2)
return(ext_list)
}
}
#' Calculate anagenesis rate
#' @description Internal function.
#' Calculates the anagenesis rate given the current number of
#' immigrant species and the per capita rate.
#'
#' @inheritParams default_params_doc
#'
#' @keywords internal
#' @family rate calculations
#' @author Pedro Neves, Joshua Lambert, Shu Xie
get_ana_rate <- function(laa,
num_immigrants,
island_spec = NULL,
trait_pars = NULL) {
if(is.null(trait_pars)){
ana_rate <- laa * num_immigrants
return(ana_rate)
}else{
ana_rate1 = laa * length(intersect(which(island_spec[,4] == "I"),
which(island_spec[,8] == "1")))
ana_rate2 = trait_pars$ana_rate2 * length(intersect(which(island_spec[,4] == "I"),
which(island_spec[,8] == "2")))
ana_list <- list(ana_rate1 = ana_rate1,
ana_rate2 = ana_rate2)
return(ana_list)
}
}
#' Calculate cladogenesis rate
#' @description Internal function.
#' Calculates the cladogenesis rate given the current number of
#' species in the system, the carrying capacity and the per capita cladogenesis
#' rate
#'
#' @inheritParams default_params_doc
#'
#' @keywords internal
#' @author Pedro Neves, Joshua Lambert, Shu Xie
get_clado_rate <- function(lac,
hyper_pars,
num_spec,
K,
A,
trait_pars = NULL,
island_spec = NULL) {
# testit::assert(are_hyper_pars(hyper_pars))
d <- hyper_pars$d
if (is.null(trait_pars)) {
clado_rate <- max(
0, lac * num_spec * (A ^ d) * (1 - num_spec / (K * A)), na.rm = TRUE
)
# testit::assert(clado_rate >= 0)
# testit::assert(is.numeric(clado_rate))
return(clado_rate)
}else{
num_spec_trait1 <- length(which(island_spec[, 8] == "1"))
num_spec_trait2 <- length(which(island_spec[, 8] == "2"))
clado_rate1 <- max(
0, lac * num_spec_trait1 * (1 - num_spec / K),
na.rm = TRUE)
clado_rate2 <- max(
0, trait_pars$clado_rate2 * num_spec_trait2 * (1 - num_spec / K),
na.rm = TRUE
)
# testit::assert(clado_rate1 >= 0)
# testit::assert(clado_rate2 >= 0)
# testit::assert(is.numeric(clado_rate1))
# testit::assert(is.numeric(clado_rate2))
clado_list <- list(clado_rate1 = clado_rate1,
clado_rate2 = clado_rate2)
return(clado_list)
}
}
#' Calculate immigration rate
#' @description Internal function.
#' Calculates the immigration rate given the current number of
#' species in the system, the carrying capacity
#'
#' @inheritParams default_params_doc
#'
#' @keywords internal
#' @family rate calculations
#' @author Pedro Neves, Joshua Lambert
#' @references Valente, Luis M., Rampal S. Etienne, and Albert B. Phillimore.
#' "The effects of island ontogeny on species diversity and phylogeny."
#' Proceedings of the Royal Society of London B: Biological Sciences 281.1784 (2014): 20133227.
get_immig_rate <- function(gam,
A,
num_spec,
K,
mainland_n,
trait_pars = NULL,
island_spec = NULL) {
if (is.null(trait_pars)) {
immig_rate <- max(c(mainland_n * gam * (1 - (num_spec / (A * K))),
0), na.rm = TRUE)
return(immig_rate)
} else {
mainland_n2 <- trait_pars$M2
gam2 <- trait_pars$immig_rate2
immig_rate1 <- max(c(mainland_n * gam * (1 - (num_spec / (A * K))),
0), na.rm = TRUE)
immig_rate2 <- max(c(mainland_n2 * gam2 * (1 - (num_spec / (A * K))),
0), na.rm = TRUE)
immig_list <- list(immig_rate1 = immig_rate1,
immig_rate2 = immig_rate2)
return(immig_list)
}
}
#' Calculate transition rate
#' @description Internal function.
#' Calculates the transition rate given the current number of
#' immigrant species and the per capita rate.
#' @param trait_pars A named list containing diversification rates considering
#' two trait states created by \code{\link{create_trait_pars}}:
#' \itemize{
#'   \item{[1]:A numeric with the per capita transition rate with state1}
#'   \item{[2]:A numeric with the per capita immigration rate with state2}
#'   \item{[3]:A numeric with the per capita extinction rate with state2}
#'   \item{[4]:A numeric with the per capita anagenesis rate with state2}
#'   \item{[5]:A numeric with the per capita cladogenesis rate with state2}
#'   \item{[6]:A numeric with the per capita transition rate with state2}
#'   \item{[7]:A numeric with the number of species with trait state 2 on mainland}
#' }
#' @param island_spec Matrix with current state of simulation containing number
#' of species.
#' @keywords internal
#' @family rates calculation
get_trans_rate <- function(trait_pars,
island_spec){
# Make function accept island_spec matrix or numeric
if (is.matrix(island_spec) || is.null(island_spec)) {
num_spec_trait1 <- length(which(island_spec[, 8] == "1"))
num_spec_trait2 <- length(which(island_spec[, 8] == "2"))
}
trans_rate1 <- trait_pars$trans_rate * num_spec_trait1
trans_rate2 <- trait_pars$trans_rate2 * num_spec_trait2
# testit::assert(is.numeric(trans_rate1))
# testit::assert(trans_rate1 >= 0)
# testit::assert(is.numeric(trans_rate2))
# testit::assert(trans_rate2 >= 0)
trans_list <- list(trans_rate1 = trans_rate1,
trans_rate2 = trans_rate2)
return(trans_list)
}
#' Calculates when the next timestep will be.
#'
#' @param timeval current time of simulation
#' @param max_rates named list of max rates as returned by
#' \code{\link{update_rates}}.
#'
#' @return named list with numeric vector containing the time of the next
#' timestep and the change in time.
#'
#' @keywords internal
#'
#' @author Joshua Lambert, Pedro Neves, Shu Xie
calc_next_timeval <- function(max_rates, timeval) {
# testit::assert(timeval >= 0)
if (length(max_rates) == 4) {   ## no considering about two trait states
totalrate <- max_rates[[1]] + max_rates[[2]] + max_rates[[3]] + max_rates[[4]]
} else {
totalrate <- max_rates[[1]] + max_rates[[2]] + max_rates[[3]] + max_rates[[4]] +
max_rates[[5]] + max_rates[[6]] + max_rates[[7]] + max_rates[[8]] +
max_rates[[9]] + max_rates[[10]]
}
dt <- stats::rexp(1, totalrate)
timeval <- timeval + dt
return(list(timeval = timeval, dt = dt))
}
#' Calculates when the next timestep will be, and if a shift has occured.
#'
#' @param timeval current time of simulation
#' @param max_rates named list of max rates as returned by
#' \code{\link{update_rates}}.
#' @param dynamic_shift_times numeric vector of times of rate shifts.
#'
#' @return named list with numeric vector containing the time of the next
#' timestep and the change in time.
#' @keywords internal
#'
#' @author Joshua Lambert, Pedro Neves, Shu Xie
calc_next_timeval_shift <- function(max_rates,
timeval,
dynamic_shift_times) {
# testit::assert(timeval >= 0)
totalrate <- max_rates[[1]] + max_rates[[2]] + max_rates[[3]] + max_rates[[4]]
dt <- stats::rexp(1, totalrate)
timeval <- timeval + dt
rate_shift <- FALSE
if (timeval >= dynamic_shift_times[1]) {
timeval <- dynamic_shift_times[1]
dynamic_shift_times <- dynamic_shift_times[-1]
rate_shift <- TRUE
}
out <- list(
timeval = timeval,
dt = dt,
dynamic_shift_times = dynamic_shift_times,
rate_shift = rate_shift
)
return(out)
}
#' Calculates the area at a point in time from a beta function
#'
#' @inheritParams default_params_doc
#'
#' @keywords internal
#'
#' @author Joshua Lambert, Pedro Neves, Shu Xie
#'
#' @return Numeric
calc_Abeta <- function(proptime,
proptime_max,
peak,
Amax) {
f <- proptime_max / (1 - proptime_max)
a <- f * peak / (1 + f)
b <- peak / (1 + f)
At <- Amax * proptime ^ a *
(1 - proptime) ^ b / ((a / (a + b)) ^ a * (b / (a + b)) ^ b)
return(At)
}
#' Calculates the peak of ontogeny curve (beta function)
#'
#' @inheritParams default_params_doc
#'
#' @keywords internal
#'
#' @return numeric
calc_peak <- function(total_time,
area_pars) {
Amax <- area_pars$max_area
Acurr <- area_pars$current_area
proptime_max <- area_pars$proportional_peak_t
proptime_curr <- total_time / area_pars$total_island_age
# testit::assert(Acurr <= Amax)
# testit::assert(proptime_max <= 1 & proptime_max >= 0)
# testit::assert(proptime_curr <= 1 & proptime_curr >= 0)
Abeta2 <- function(x) {
calc_Abeta(proptime_curr, proptime_max, x, Amax) - Acurr
}
peak <- stats::uniroot(Abeta2, c(0.01, 1000))$root
# testit::assert(is.numeric(peak))
# testit::assert(is.finite(peak))
return(peak)
}
#' Samples what event to happen next
#'
#' @inheritParams default_params_doc
#'
#' @return numeric indicating what event will happen, or a supposed event that
#' would happen in some timesteps of the ontogeny algorithm.
#' \itemize{
#'   \item{[1]: immigration event with trait1}
#'   \item{[2]: extinction event with trait1}
#'   \item{[3]: cladogenesis event with trait1}
#'   \item{[4]: anagenesis event with trait1}
#'   \item{[5]: transition event with trait1}
#'   \item{[6]: immigration event with trait2}
#'   \item{[7]: extinction event with trait2}
#'   \item{[8]: cladogenesis event with trait2}
#'   \item{[9]: anagenesis event with trait2}
#'   \item{[10]: transition event with trait2}
#' }
#' @author Shu Xie
#' @keywords internal
DAISIE_sample_event_trait_dep <- function(rates) {
# testit::assert(are_rates(rates))
possible_event <- sample(x = 1:10,
size = 1,
replace = FALSE,
prob = c(rates$immig_rate,
rates$ext_rate,
rates$ana_rate,
rates$clado_rate,
rates$trans_rate,
rates$immig_rate2,
rates$ext_rate2,
rates$ana_rate2,
rates$clado_rate2,
rates$trans_rate2)
)
# testit::assert(is.numeric(possible_event))
# testit::assert(possible_event >= 1)
return(possible_event)
}
answer <- DAISIE_sim_core_trait_dep(time = time,
mainland_n = mainland_n,
pars = c(immig_rate,
ext_rate,
K,
ana_rate,
clado_rate),
island_ontogeny = 0,
sea_level = 0,
hyper_pars = TRAISIERCPP::create_hyper_pars(d = 0, x = 0),
area_pars = TRAISIERCPP::create_area_pars(),
extcutoff = 1000,
trait_pars = local_trait_pars)
answer
#' Internal function of the DAISIE simulation
#'
#' @inheritParams default_params_doc
#' @keywords internal
dDAISIE_sim_core_trait_dep <- function(
time,
mainland_n,
pars,
island_ontogeny = 0,
sea_level = 0,
hyper_pars,
area_pars,
extcutoff = 1000,
trait_pars = NULL
) {
#### Initialization ####
timeval <- 0
total_time <- time
island_ontogeny <- translate_island_ontogeny(island_ontogeny)
sea_level <- translate_sea_level(sea_level)
if (is.null(trait_pars)){
stop("A second set of rates should be contain considering two trait states.
If only one state,run DAISIE_sim_cr instead.")
}
if (pars[4] == 0 && trait_pars$immig_rate2 == 0) {
stop("Island has no species and the rate of
colonisation is zero. Island cannot be colonised.")
}
mainland_n2 <- trait_pars$M2
mainland_ntotal <- mainland_n + mainland_n2
if (mainland_n != 0){
mainland_spec <- seq(1, mainland_n, 1)
}else{
mainland_spec <- c()
}
maxspecID <- mainland_ntotal
island_spec <- c()
stt_table <- matrix(ncol = 7)
colnames(stt_table) <- c("Time","nI","nA","nC","nI2","nA2","nC2")
stt_table[1,] <- c(total_time,0,0,0,0,0,0)
lac <- pars[1]
mu <- pars[2]
K <- pars[3]
gam <- pars[4]
laa <- pars[5]
num_spec <- length(island_spec[, 1])
num_immigrants <- length(which(island_spec[, 4] == "I"))
#### Start Monte Carlo iterations ####
while (timeval < total_time) {
rates <- update_rates(
timeval = timeval,
total_time = total_time,
gam = gam,
laa = laa,
lac = lac,
mu = mu,
hyper_pars = hyper_pars,
area_pars = area_pars,
K = K,
num_spec = num_spec,
num_immigrants = num_immigrants,
mainland_n = mainland_n,
extcutoff = extcutoff,
island_ontogeny = 0,
sea_level = 0,
island_spec = island_spec,
trait_pars = trait_pars
)
timeval_and_dt <- calc_next_timeval(
max_rates = rates,
timeval = timeval
)
timeval <- timeval_and_dt$timeval
if (timeval < total_time) {
possible_event <- DAISIE_sample_event_trait_dep(
rates = rates
)
updated_state <- DAISIE_sim_update_state_trait_dep(
timeval = timeval,
total_time = total_time,
possible_event = possible_event,
maxspecID = maxspecID,
mainland_spec = mainland_spec,
island_spec = island_spec,
stt_table = stt_table,
trait_pars = trait_pars
)
island_spec <- updated_state$island_spec
maxspecID <- updated_state$maxspecID
stt_table <- updated_state$stt_table
num_spec <- length(island_spec[, 1])
num_immigrants <- length(which(island_spec[, 4] == "I"))
}
}
#### Finalize STT ####
stt_table <- rbind(
stt_table,
c(
0,
stt_table[nrow(stt_table), 2],
stt_table[nrow(stt_table), 3],
stt_table[nrow(stt_table), 4],
stt_table[nrow(stt_table), 5],
stt_table[nrow(stt_table), 6],
stt_table[nrow(stt_table), 7]
)
)
return(island_spec)
}
library(TRAISIERCPP)
answer <- DAISIE_sim_core_trait_dep(time = time,
mainland_n = mainland_n,
pars = c(immig_rate,
ext_rate,
K,
ana_rate,
clado_rate),
island_ontogeny = 0,
sea_level = 0,
hyper_pars = TRAISIERCPP::create_hyper_pars(d = 0, x = 0),
area_pars = TRAISIERCPP::create_area_pars(),
extcutoff = 1000,
trait_pars = local_trait_pars)
answer
island_spec_R <- TRAISIERCPP::create_island_spec(time = 5,
mainland_n = 1,
K = Inf,
immig_rate = 0.1,
ext_rate = 0.0,
ana_rate = 0.2,
clado_rate = 0.2,
immig_rate2 = 0.1,
ext_rate2 = 0.0,
ana_rate2 = 0.1,
clado_rate2 = 0.1,
trans_rate = 0.1,
trans_rate2 = 0.1,
M2 = 1)
island_spec_R
